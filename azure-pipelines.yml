# ============================================
# CI/CD: Maven + Docker (ACR) + AKS rollout
# Pool: Default (self-hosted agent)
# ============================================

trigger:
  branches: { include: [ main ] }

pr:
  branches: { include: [ main ] }

# Your self-hosted agent pool
pool:
  name: Default

# ---- Variables you should keep/update ----
variables:
  # ACR + image
  imageRepository: 'aks-java-api'
  acrLoginServer: 'hwacrdev001.azurecr.io'          # e.g. myacr.azurecr.io
  acrServiceConnection: 'ACRServiceConnection'      # Service connection (Docker Registry / ACR)
  tag: '$(Build.BuildId)'

  # AKS
  kubernetesServiceConnection: 'AKSServiceConnection' # Service connection (Kubernetes)
  k8sNamespace: 'demo'

# ============================================
# 1) Build + Test + Sonar
# ============================================
stages:
- stage: Build_Test_Scan
  displayName: 'Build, Test & Sonar'
  jobs:
  - job: MavenBuild
    displayName: 'Maven build & tests'
    steps:
    - checkout: self

    # Ensure Java 17 is available on a self-hosted agent
    # (downloads a JDK into the agent tool cache)
    - task: JavaToolInstaller@0
      displayName: 'Install JDK 17'
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'Azure Pipelines'

    # (Optional) SonarQube â€” requires a working service connection
    - task: SonarQubePrepare@5
      displayName: 'Prepare SonarQube'
      inputs:
        SonarQube: 'SonarQube Server local connection'
        scannerMode: 'Other'
        configMode: 'manual'
        extraProperties: |
          sonar.projectKey=aks-java-api
          sonar.projectName=aks-java-api
          sonar.sourceEncoding=UTF-8
          sonar.java.source=17
          sonar.coverage.jacoco.xmlReportPaths=**/jacoco*.xml

    - task: Maven@4
      displayName: 'Maven clean verify (tests + JaCoCo)'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean verify'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenOptions: '-Xmx3072m -Dmaven.test.failure.ignore=false'

    - task: SonarQubeAnalyze@5
      displayName: 'Run SonarQube Analysis'

    - task: SonarQubePublish@5
      displayName: 'Publish Quality Gate'
      inputs:
        pollingTimeoutSec: '300'

# ============================================
# 2) Build & Push Docker image to ACR
# ============================================
- stage: Build_Push_Image
  displayName: 'Build & Push image'
  dependsOn: Build_Test_Scan
  condition: succeeded()
  jobs:
  - job: DockerBuild
    displayName: 'Docker build & push'
    steps:
    - checkout: self

    # Login to ACR via service connection
    - task: Docker@2
      displayName: 'ACR login'
      inputs:
        command: 'login'
        containerRegistry: '$(acrServiceConnection)'

    # Build the image
    - task: Docker@2
      displayName: 'Build image'
      inputs:
        command: 'build'
        repository: '$(imageRepository)'
        dockerfile: '**/Dockerfile'
        tags: |
          $(tag)

    # Push to ACR
    - task: Docker@2
      displayName: 'Push image'
      inputs:
        command: 'push'
        containerRegistry: '$(acrServiceConnection)'
        repository: '$(imageRepository)'
        tags: |
          $(tag)

# ============================================
# 3) Deploy to AKS and wait for rollout
# ============================================
- stage: Deploy_AKS
  displayName: 'Deploy to AKS (demo)'
  dependsOn: Build_Push_Image
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'K8s deploy'
    environment: 'aks-dev'     # Optional: add approvals on this environment
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          # Ensure the namespace exists (idempotent)
          - task: Kubernetes@1
            displayName: 'Ensure namespace exists'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
              command: 'apply'
              useConfigurationFile: true
              configurationType: 'inline'
              inline: |
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: $(k8sNamespace)

          # Optional secret (if your app reads APP_MESSAGE from secretKeyRef)
          - task: KubernetesManifest@1
            displayName: 'Create/Update app secret'
            inputs:
              action: 'createSecret'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(k8sNamespace)'
              secretType: 'generic'
              secretName: 'app-secrets'
              secretArguments: |
                --from-literal=APP_MESSAGE=$(APP_MESSAGE)

          # Deploy manifests and substitute the container image tag
          - task: KubernetesManifest@1
            displayName: 'Deploy app + service'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(k8sNamespace)'
              manifests: |
                k8s/deployment.yaml
                k8s/service.yaml
              containers: |
                $(acrLoginServer)/$(imageRepository):$(tag)

          # Wait for rollout to finish
          - task: Kubernetes@1
            displayName: 'Rollout status'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
              namespace: '$(k8sNamespace)'
              command: 'rollout'
              arguments: 'status deploy/aks-java-api --timeout=300s'

          # Show service external IP (if LoadBalancer)
          - task: Kubernetes@1
            displayName: 'Show service'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
              namespace: '$(k8sNamespace)'
              command: 'get'
              arguments: 'svc aks-java-api -o wide'
