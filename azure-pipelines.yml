trigger:
  branches:
    include: [ main ]

pr:
  branches:
    include: [ main ]

# Use your self-hosted agent pool (SHIVA is in 'Default')
pool:
  name: Default

variables:
  mavenOpts: '-Xmx3072m'
  imageRepository: 'aks-java-api'
  acrLoginServer: 'hwacrdev001.azurecr.io'
  acrServiceConnection: 'ACRServiceConnection'
  kubernetesServiceConnection: 'AKSServiceConnection'
  k8sNamespace: 'demo'
  tag: '$(Build.BuildId)'

stages:
# ──────────────────────────────────────────────────────────────────────────────
# 1) Build, Test, Coverage (and optional Sonar)
# ──────────────────────────────────────────────────────────────────────────────
- stage: Build_Test_Scan
  displayName: 'Build, Test & Sonar Scan'
  jobs:
  - job: MavenBuild
    displayName: Maven build & tests
    steps:
      - checkout: self

      # Ensure JDK 17 is present on the agent for the Maven task
      - task: JavaToolInstaller@0
        displayName: 'Install JDK 17 (Temurin)'
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'   # set to AzureStorage if you want hosted download

      # (Optional) Sonar – keep if you already wired a service connection
      - task: SonarQubePrepare@5
        displayName: 'Prepare SonarQube Analysis'
        inputs:
          SonarQube: 'SonarQube Server local connection'
          scannerMode: 'Other'
          configMode: 'manual'
          extraProperties: |
            sonar.projectKey=aks-java-api
            sonar.projectName=aks-java-api
            sonar.sourceEncoding=UTF-8
            sonar.java.source=17
            sonar.coverage.jacoco.xmlReportPaths=**/jacoco*.xml

      - task: Maven@4
        displayName: 'Maven clean verify (tests + JaCoCo)'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'clean verify'
          options: '-Dmaven.test.failure.ignore=false'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          codeCoverageToolOption: JaCoCo
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          mavenOptions: '$(mavenOpts)'

      - task: SonarQubeAnalyze@5
        displayName: 'Run SonarQube Analysis'
        condition: succeeded()

      - task: SonarQubePublish@5
        displayName: 'Publish Quality Gate'
        inputs:
          pollingTimeoutSec: '300'
        condition: succeeded()

# ──────────────────────────────────────────────────────────────────────────────
# 2) Build & Push Docker image to ACR
# ──────────────────────────────────────────────────────────────────────────────
- stage: Build_Push_Image
  displayName: 'Build & Push Docker Image'
  dependsOn: Build_Test_Scan
  condition: succeeded()
  jobs:
  - job: ACRBuild
    displayName: Docker build & push
    steps:
      - checkout: self

      - task: Docker@2
        displayName: 'Login to ACR'
        inputs:
          command: login
          containerRegistry: '$(acrServiceConnection)'

      - task: Docker@2
        displayName: 'Build image'
        inputs:
          command: build
          repository: '$(imageRepository)'
          dockerfile: 'Dockerfile'
          tags: |
            $(tag)

      - task: Docker@2
        displayName: 'Push image to ACR'
        inputs:
          command: push
          repository: '$(imageRepository)'
          tags: |
            $(tag)
          containerRegistry: '$(acrServiceConnection)'

# ──────────────────────────────────────────────────────────────────────────────
# 3) Deploy to AKS (Option A: wait for rollout)
# ──────────────────────────────────────────────────────────────────────────────
- stage: Deploy_AKS
  displayName: 'Deploy to AKS (demo)'
  dependsOn: Build_Push_Image
  condition: succeeded()
  jobs:
  - deployment: K8sDeploy
    displayName: 'K8s deploy'
    environment: 'aks-dev'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            # Ensure namespace exists (idempotent)
            - task: Kubernetes@1
              displayName: 'Ensure namespace exists'
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
                command: 'apply'
                useConfigurationFile: true
                configurationType: 'inline'
                inline: |
                  apiVersion: v1
                  kind: Namespace
                  metadata:
                    name: $(k8sNamespace)

            # (Optional) create/update a secret value for the app
            # Define a pipeline variable APP_MESSAGE or wire from KeyVault beforehand
            - task: KubernetesManifest@1
              displayName: 'Create/Update app secret'
              inputs:
                action: createSecret
                kubernetesServiceConnection: '$(kubernetesServiceConnection)'
                namespace: '$(k8sNamespace)'
                secretType: generic
                secretName: 'app-secrets'
                secretArguments: |
                  --from-literal=APP_MESSAGE=$(APP_MESSAGE)

            # Deploy manifests and substitute the container image
            - task: KubernetesManifest@1
              displayName: 'Deploy app + service'
              inputs:
                action: deploy
                kubernetesServiceConnection: '$(kubernetesServiceConnection)'
                namespace: '$(k8sNamespace)'
                manifests: |
                  k8s/deployment.yaml
                  k8s/service.yaml
                containers: |
                  $(acrLoginServer)/$(imageRepository):$(tag)

            # Option A: Wait for rollout to complete
            - task: Kubernetes@1
              displayName: 'Rollout status (wait until Ready)'
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
                namespace: '$(k8sNamespace)'
                command: 'rollout'
                arguments: 'status deploy/aks-java-api --timeout=300s'

            - task: Kubernetes@1
              displayName: 'Show service (external IP)'
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
                namespace: '$(k8sNamespace)'
                command: 'get'
                arguments: 'svc aks-java-api -o wide'
