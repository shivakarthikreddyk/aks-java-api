# =========================
# CI/CD: Java + ACR build + AKS deploy
# =========================

trigger:
  branches:
    include: [ main ]

pr:
  branches:
    include: [ main ]

# Use your self-hosted pool that has the SHIVA agent
pool:
  name: Default

variables:
  # --- Service connections (must match exactly what exists in Project Settings > Service connections)
  azureRmServiceConnection: 'AzureRM-ACR'       # Azure Resource Manager service connection (subscription with ACR)
  aksServiceConnection:     'AKSServiceConnection'  # Kubernetes service connection to your AKS

  # --- App/infra
  acrName:            'hwacrdev001'                # ACR name (no domain)
  acrLoginServer:     'hwacrdev001.azurecr.io'     # ACR login server
  imageRepository:    'aks-java-api'               # repo name inside ACR
  k8sNamespace:       'demo'

  # --- Build
  tag:                '$(Build.BuildId)'
  mavenOpts:          '-Xmx3072m'

stages:
# -------------------------
# 1) Build + Test (+ Sonar)
# -------------------------
- stage: Build_Test_Scan
  displayName: 'Build, Test & (optional) Sonar'
  jobs:
  - job: MavenBuild
    displayName: 'Maven build & tests'
    steps:
    - checkout: self

    # (Optional) SonarQube — requires a valid Sonar service connection named below
    - task: SonarQubePrepare@5
      displayName: 'Prepare SonarQube Analysis'
      condition: succeeded()
      inputs:
        SonarQube: 'SonarQube Server local connection'
        scannerMode: 'Other'
        configMode: 'manual'
        extraProperties: |
          sonar.projectKey=$(imageRepository)
          sonar.projectName=$(imageRepository)
          sonar.sourceEncoding=UTF-8
          sonar.java.source=17
          sonar.coverage.jacoco.xmlReportPaths=**/jacoco*.xml

    - task: Maven@4
      displayName: 'Maven clean verify (tests + JaCoCo)'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean verify'
        options: '-Dmaven.test.failure.ignore=false'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: JaCoCo
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenOptions: '$(mavenOpts)'

    - task: SonarQubeAnalyze@5
      displayName: 'Run SonarQube Analysis'
      condition: succeeded()

    - task: SonarQubePublish@5
      displayName: 'Publish Quality Gate Result'
      condition: succeeded()
      inputs:
        pollingTimeoutSec: '300'

# --------------------------------------
# 2) Build the container image in **ACR**
# --------------------------------------
- stage: ACR_Build
  displayName: 'Build image in ACR'
  dependsOn: Build_Test_Scan
  condition: succeeded()
  jobs:
  - job: ACRBuild
    displayName: 'az acr build'
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: 'ACR build: $(imageRepository):$(tag)'
      inputs:
        azureSubscription: '$(azureRmServiceConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Building in ACR $(acrName)…"
          az acr build `
            --registry $(acrName) `
            --image $(acrLoginServer)/$(imageRepository):$(tag) `
            --image $(acrLoginServer)/$(imageRepository):latest `
            .

# -----------------------
# 3) Deploy to AKS (demo)
# -----------------------
- stage: Deploy_AKS
  displayName: 'Deploy to AKS'
  dependsOn: ACR_Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'K8s rollout'
    environment: 'aks-dev'   # set approvals on this environment if desired
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          # Ensure namespace exists (idempotent)
          - task: Kubernetes@1
            displayName: 'Ensure namespace exists'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(aksServiceConnection)'
              command: 'apply'
              useConfigurationFile: true
              configurationType: 'inline'
              inline: |
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: $(k8sNamespace)

          # (Optional) Create/refresh a runtime secret
          # Uncomment and set a variable named APP_MESSAGE in your pipeline/library if you want to use it.
          # - task: KubernetesManifest@1
          #   displayName: 'Create/Update app secret'
          #   inputs:
          #     action: createSecret
          #     kubernetesServiceConnection: '$(aksServiceConnection)'
          #     namespace: '$(k8sNamespace)'
          #     secretType: generic
          #     secretName: 'app-secrets'
          #     secretArguments: |
          #       --from-literal=APP_MESSAGE=$(APP_MESSAGE)

          - task: KubernetesManifest@1
            displayName: 'Deploy app + service'
            inputs:
              action: deploy
              kubernetesServiceConnection: '$(aksServiceConnection)'
              namespace: '$(k8sNamespace)'
              manifests: |
                k8s/deployment.yaml
                k8s/service.yaml
              containers: |
                $(acrLoginServer)/$(imageRepository):$(tag)

          - task: Kubernetes@1
            displayName: 'Rollout status (wait until Ready)'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(aksServiceConnection)'
              namespace: '$(k8sNamespace)'
              command: 'rollout'
              arguments: 'status deploy/aks-java-api --timeout=300s'

          - task: Kubernetes@1
            displayName: 'Show service (external IP)'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(aksServiceConnection)'
              namespace: '$(k8sNamespace)'
              command: 'get'
              arguments: 'svc aks-java-api -o wide'
