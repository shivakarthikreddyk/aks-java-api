# ================================
# Azure Pipelines: Java + ACR + AKS (self-hosted Windows agent)
# Pool: Default  |  Agent: SHIVA
# ================================

trigger:
  branches:
    include: [ main ]

pr:
  branches:
    include: [ main ]

pool:
  name: Default   # your self-hosted pool

variables:
  # ----- Image & registry -----
  imageRepository: 'aks-java-api'
  acrName: 'hwacrdev001'                      # ACR resource name (no FQDN)
  acrLoginServer: 'hwacrdev001.azurecr.io'    # ACR login server
  tag: '$(Build.BuildId)'

  # ----- Service connections -----
  azureSubscription: 'AzureRM-ACR'            # ARM service connection
  kubernetesServiceConnection: 'AKSServiceConnectionAdmin'  # cluster-admin K8s SC

  # ----- K8s -----
  k8sNamespace: 'demo'

  # ----- Sonar (optional) -----
  sonarServiceConnection: 'SonarQube Server local connection'

stages:
# ================================
# 1) Build, Test, Sonar
# ================================
- stage: Build_Test_Scan
  displayName: 'Build, Test & Sonar'
  jobs:
  - job: MavenBuild
    displayName: 'Maven build & tests'
    steps:
      - checkout: self

      # JDK 17 on self-hosted Windows
      - task: JavaToolInstaller@0
        displayName: 'Install JDK 17 (Temurin)'
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'   # downloads/caches via toolcache if needed
          jdkDestinationDirectory: '$(Agent.ToolsDirectory)/Java'
          cleanDestinationDirectory: false

      # Sonar prepare (optional; extension shows deprecation warnings but still works)
      - task: SonarQubePrepare@5
        displayName: 'Prepare SonarQube Analysis'
        inputs:
          SonarQube: '$(sonarServiceConnection)'
          scannerMode: 'Other'
          configMode: 'manual'
          extraProperties: |
            sonar.projectKey=$(imageRepository)
            sonar.projectName=$(imageRepository)
            sonar.sourceEncoding=UTF-8
            sonar.java.source=17
            sonar.coverage.jacoco.xmlReportPaths=**/jacoco*.xml

      - task: Maven@4
        displayName: 'Maven clean verify (tests + JaCoCo)'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'clean verify'
          options: '-Dmaven.test.failure.ignore=false'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          codeCoverageToolOption: JaCoCo
          javaHomeOption: 'Path'        # use JAVA_HOME set by JavaToolInstaller
          jdkDirectory: '$(JAVA_HOME)'
          mavenOptions: '-Xmx1024m'

      - task: SonarQubeAnalyze@5
        displayName: 'Run SonarQube Analysis'
        condition: succeededOrFailed()

      - task: SonarQubePublish@5
        displayName: 'Publish Quality Gate'
        inputs:
          pollingTimeoutSec: '300'
        condition: succeededOrFailed()

# ================================
# 2) ACR server-side build (no Docker/WSL on agent)
# ================================
- stage: ACR_Build
  displayName: 'Build image in ACR (az acr build)'
  dependsOn: Build_Test_Scan
  condition: succeeded()
  jobs:
  - job: ACRBuild
    displayName: 'ACR build: $(imageRepository):$(tag)'
    steps:
      - checkout: self

      # Use PowerShell (avoid Bash/WSL on Windows agent)
      - task: AzureCLI@2
        displayName: 'az acr build → $(imageRepository):$(tag)'
        inputs:
          azureSubscription: '$(azureSubscription)'
          scriptType: 'ps'                 # ✅ Force PowerShell
          scriptLocation: 'inlineScript'
          inlineScript: |
            Write-Host "Using subscription:"
            az account show

            Write-Host "Starting ACR build for $(imageRepository):$(tag)..."
            az acr build `
              --registry $(acrName) `
              --image $(imageRepository):$(tag) `
              --file Dockerfile `
              .

            Write-Host "✅ ACR build completed."

# ================================
# 3) Deploy to AKS + rollout wait
# ================================
- stage: Deploy_AKS
  displayName: 'Deploy to AKS (demo)'
  dependsOn: ACR_Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'K8s deploy & rollout'
    environment: 'aks-dev'   # optional approvals
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            # If you used a non-admin K8s service connection, remove this step and precreate the namespace out-of-band
            - task: Kubernetes@1
              displayName: 'Ensure namespace $(k8sNamespace)'
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
                command: 'apply'
                useConfigurationFile: true
                configurationType: 'inline'
                inline: |
                  apiVersion: v1
                  kind: Namespace
                  metadata:
                    name: $(k8sNamespace)

            # Optional: app secret (requires permission in the target namespace)
            - task: KubernetesManifest@1
              displayName: 'Create/Update app secret'
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: '$(kubernetesServiceConnection)'
                namespace: '$(k8sNamespace)'
                secretType: 'generic'
                secretName: 'app-secrets'
                secretArguments: |
                  --from-literal=APP_MESSAGE=$(APP_MESSAGE)

            # Deploy manifests and set the image/tag
            - task: KubernetesManifest@1
              displayName: 'Deploy app + service'
              inputs:
                action: 'deploy'
                kubernetesServiceConnection: '$(kubernetesServiceConnection)'
                namespace: '$(k8sNamespace)'
                manifests: |
                  k8s/deployment.yaml
                  k8s/service.yaml
                containers: |
                  $(acrLoginServer)/$(imageRepository):$(tag)

            # Wait for rollout
            - task: Kubernetes@1
              displayName: 'Rollout status (wait until Ready)'
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
                namespace: '$(k8sNamespace)'
                command: 'rollout'
                arguments: 'status deploy/aks-java-api --timeout=300s'

            # Show service external IP
            - task: Kubernetes@1
              displayName: 'Show service (external IP)'
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
                namespace: '$(k8sNamespace)'
                command: 'get'
                arguments: 'svc aks-java-api -o wide'
