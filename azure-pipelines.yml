# azure-pipelines.yml

trigger:
  branches: { include: [ main ] }

pr:
  branches: { include: [ main ] }

pool:
  name: Default   # your self-hosted agent pool (agent SHIVA)

variables:
  # Image / app
  imageRepository: 'aks-java-api'
  tag: '$(Build.BuildId)'

  # ACR / AKS
  acrName: 'hwacrdev001'
  acrLoginServer: 'hwacrdev001.azurecr.io'
  kubeNamespace: 'demo'

  # Optional demo secret
  APP_MESSAGE: 'Hello from pipeline'

stages:
# ───────────────────────────────
# 1) Build, Test & (optional) Sonar
# ───────────────────────────────
- stage: Build_Test_Scan
  displayName: 'Build, Test & (optional) Sonar'
  jobs:
  - job: MavenBuild
    displayName: 'Maven build & tests'
    steps:
      - checkout: self

      - task: JavaToolInstaller@0
        displayName: 'Install JDK 17'
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'

      # (Optional) Sonar — remove the three Sonar tasks if you’re not using it
      - task: SonarQubePrepare@5
        displayName: 'Prepare SonarQube Analysis'
        inputs:
          SonarQube: 'SonarQube Server local connection'
          scannerMode: 'Other'
          configMode: 'manual'
          extraProperties: |
            sonar.projectKey=$(imageRepository)
            sonar.projectName=$(imageRepository)
            sonar.java.source=17
            sonar.coverage.jacoco.xmlReportPaths=**/jacoco*.xml

      - task: Maven@4
        displayName: 'Maven clean verify (tests + JaCoCo)'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'clean verify'
          options: '-Dmaven.test.failure.ignore=false'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          codeCoverageToolOption: 'JaCoCo'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'

      - task: SonarQubeAnalyze@5
        displayName: 'Run SonarQube Analysis'

      - task: SonarQubePublish@5
        displayName: 'Publish Quality Gate'
        inputs:
          pollingTimeoutSec: '300'

# ───────────────────────────────
# 2) Build image in ACR (server-side)
#    ⚠️ Runs with PowerShell, NOT bash
# ───────────────────────────────
- stage: ACR_Build
  displayName: 'Build image in ACR (az acr build)'
  dependsOn: Build_Test_Scan
  condition: succeeded()
  jobs:
  - job: ACRBuild
    displayName: 'az acr build → $(imageRepository):$(tag)'
    steps:
      - checkout: self

      - task: AzureCLI@2
        displayName: 'az acr build → $(imageRepository):$(tag)'
        inputs:
          azureSubscription: 'AzureRM-ACR'     # ARM service connection
          scriptType: 'ps'                     # ✅ PowerShell, avoids WSL
          scriptLocation: 'inlineScript'
          workingDirectory: '$(Build.SourcesDirectory)'
          inlineScript: |
            Write-Host "Logging into subscription and building image in ACR..."
            az acr build `
              --registry $(acrName) `
              --image $(imageRepository):$(tag) `
              --file Dockerfile `
              .
            Write-Host "ACR build completed."

# ───────────────────────────────
# 3) Deploy to AKS + wait for rollout
# ───────────────────────────────
- stage: Deploy_AKS
  displayName: 'Deploy to AKS (demo)'
  dependsOn: ACR_Build
  condition: succeeded()
  jobs:
  - deployment: K8sDeploy
    displayName: 'K8s rollout'
    environment: 'aks-dev'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: Kubernetes@1
              displayName: 'Ensure namespace $(kubeNamespace)'
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: 'AKSServiceConnection'
                command: 'apply'
                useConfigurationFile: true
                configurationType: 'inline'
                inline: |
                  apiVersion: v1
                  kind: Namespace
                  metadata:
                    name: $(kubeNamespace)

            - task: KubernetesManifest@1
              displayName: 'Create/Update app secret'
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: 'AKSServiceConnection'
                namespace: '$(kubeNamespace)'
                secretType: 'generic'
                secretName: 'app-secrets'
                secretArguments: |
                  --from-literal=APP_MESSAGE=$(APP_MESSAGE)

            - task: KubernetesManifest@1
              displayName: 'Deploy app + service'
              inputs:
                action: 'deploy'
                kubernetesServiceConnection: 'AKSServiceConnection'
                namespace: '$(kubeNamespace)'
                manifests: |
                  k8s/deployment.yaml
                  k8s/service.yaml
                containers: |
                  $(acrLoginServer)/$(imageRepository):$(tag)

            - task: Kubernetes@1
              displayName: 'Rollout status (wait until Ready)'
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: 'AKSServiceConnection'
                namespace: '$(kubeNamespace)'
                command: 'rollout'
                arguments: 'status deploy/aks-java-api --timeout=300s'

            - task: Kubernetes@1
              displayName: 'Show service (external IP)'
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: 'AKSServiceConnection'
                namespace: '$(kubeNamespace)'
                command: 'get'
                arguments: 'svc aks-java-api -o wide'
