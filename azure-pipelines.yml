trigger:
  branches: { include: [ main ] }

pr:
  branches: { include: [ main ] }

# Your self-hosted agent pool
pool:
  name: Default

variables:
  # —— Image / ACR / AKS ——
  acrName: 'hwacrdev001'                      # <— ACR name (not FQDN)
  acrLoginServer: 'hwacrdev001.azurecr.io'    # <— ACR login server
  imageRepository: 'aks-java-api'
  tag: '$(Build.BuildId)'

  kubernetesServiceConnection: 'AKSServiceConnection'   # <— K8s svc connection name
  k8sNamespace: 'demo'

  # (Optional) Sonar settings rely on your existing service connection name
  mavenOpts: '-Xmx3072m'

stages:
# ──────────────────────────────────────────────────────────
# 1) Build + Test + Sonar (JDK 17 is installed automatically)
# ──────────────────────────────────────────────────────────
- stage: Build_Test_Scan
  displayName: 'Build, Test & Sonar Scan'
  jobs:
  - job: MavenBuild
    steps:
    - checkout: self

    # Always provision JDK 17 on the agent
    - task: JavaToolInstaller@0
      displayName: 'Install JDK 17 (Temurin)'
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'  # uses Microsoft-hosted cache; falls back to download if needed
        jdkDestinationDirectory: '$(Agent.ToolsDirectory)/jdk'

    - task: SonarQubePrepare@5
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarQube: 'SonarQube Server local connection'
        scannerMode: 'Other'
        configMode: 'manual'
        extraProperties: |
          sonar.projectKey=aks-java-api
          sonar.projectName=aks-java-api
          sonar.sourceEncoding=UTF-8
          sonar.java.source=17
          sonar.coverage.jacoco.xmlReportPaths=**/jacoco*.xml

    - task: Maven@4
      displayName: 'Maven clean verify (tests + JaCoCo)'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean verify'
        options: '-Dmaven.test.failure.ignore=false'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
        mavenOptions: '$(mavenOpts)'
        javaHomeOption: 'Path'
        jdkDirectory: '$(Agent.ToolsDirectory)/jdk'   # use the JDK we just installed

    - task: SonarQubeAnalyze@5
      displayName: 'Run SonarQube Analysis'

    - task: SonarQubePublish@5
      displayName: 'Publish Quality Gate Result'
      inputs:
        pollingTimeoutSec: '300'

# ──────────────────────────────────────────────────────────
# 2) Build & Push with ACR Tasks (no local Docker required)
# ──────────────────────────────────────────────────────────
- stage: Build_Push_Image
  displayName: 'Build & Push (ACR Task)'
  dependsOn: Build_Test_Scan
  condition: succeeded()
  jobs:
  - job: ACRBuild
    steps:
    - checkout: self

    # Build and push directly in ACR from the repo context
    - task: AzureCLI@2
      displayName: 'ACR Task: az acr build'
      inputs:
        azureSubscription: 'AzureRM-ServiceConnection-Name'   # <— CHANGE to your ARM svc connection
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          echo "Building $(imageRepository):$(tag) in ACR $(acrName)…"
          az acr build `
            -r $(acrName) `
            -t $(imageRepository):$(tag) `
            -t $(imageRepository):latest `
            .

# ──────────────────────────────────────────────────────────
# 3) Deploy to AKS and wait for rollout
# ──────────────────────────────────────────────────────────
- stage: Deploy_AKS
  displayName: 'Deploy to AKS (demo)'
  dependsOn: Build_Push_Image
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'K8s rollout'
    environment: 'aks-dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          # Ensure namespace exists (idempotent)
          - task: Kubernetes@1
            displayName: 'Ensure namespace exists'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
              command: 'apply'
              useConfigurationFile: true
              configurationType: 'inline'
              inline: |
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: $(k8sNamespace)

          # Optional: secret example
          - task: KubernetesManifest@1
            displayName: 'Create/Update app secret'
            inputs:
              action: createSecret
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(k8sNamespace)'
              secretType: generic
              secretName: 'app-secrets'
              secretArguments: |
                --from-literal=APP_MESSAGE=$(APP_MESSAGE)

          - task: KubernetesManifest@1
            displayName: 'Deploy app + service'
            inputs:
              action: deploy
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(k8sNamespace)'
              manifests: |
                k8s/deployment.yaml
                k8s/service.yaml
              # Image built by ACR Task (ACR is already attached to AKS)
              containers: |
                $(acrLoginServer)/$(imageRepository):$(tag)

          - task: Kubernetes@1
            displayName: 'Rollout status (wait until Ready)'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
              namespace: '$(k8sNamespace)'
              command: 'rollout'
              arguments: 'status deploy/aks-java-api --timeout=300s'

          - task: Kubernetes@1
            displayName: 'Show service (external IP)'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
              namespace: '$(k8sNamespace)'
              command: 'get'
              arguments: 'svc aks-java-api -o wide'
