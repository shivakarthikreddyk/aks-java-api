# =========================================
# Java → ACR (server-side build) → AKS
# Self-hosted Windows agent (pool: Default)
# =========================================

trigger:
  branches:
    include: [ main ]

pr:
  branches:
    include: [ main ]

pool:
  name: Default

variables:
  # ---- image & registry ----
  imageRepository: 'aks-java-api'
  acrName: 'hwacrdev001'                         # ACR resource name (no FQDN)
  acrLoginServer: 'hwacrdev001.azurecr.io'
  tag: '$(Build.BuildId)'

  # ---- service connections ----
  azureSubscription: 'AzureRM-ACR'               # ARM service connection (to ACR/AKS)
  kubernetesServiceConnection: 'AKSServiceConnection'  # non-admin K8s SC is fine here

  # ---- k8s ----
  k8sNamespace: 'demo'

  # ---- sonar (optional) ----
  sonarServiceConnection: 'SonarQube Server local connection'

stages:
# ==============================
# 1) Build, Test, (optional) Sonar
# ==============================
- stage: Build_Test_Scan
  displayName: 'Build, Test & Sonar (optional)'
  jobs:
  - job: MavenBuild
    displayName: 'Maven build & tests'
    steps:
      - checkout: self

      # JDK 17 for Windows agents
      - task: JavaToolInstaller@0
        displayName: 'Install JDK 17 (Temurin)'
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'          # downloads if not cached
          jdkDestinationDirectory: '$(Agent.ToolsDirectory)/Java'
          cleanDestinationDirectory: false

      # ---- SonarQube: keep if you want analysis; else remove these 2 tasks ----
      - task: SonarQubePrepare@5
        displayName: 'Prepare SonarQube Analysis'
        inputs:
          SonarQube: '$(sonarServiceConnection)'
          scannerMode: 'Other'
          configMode: 'manual'
          extraProperties: |
            sonar.projectKey=$(imageRepository)
            sonar.projectName=$(imageRepository)
            sonar.sourceEncoding=UTF-8
            sonar.java.source=17
            sonar.coverage.jacoco.xmlReportPaths=**/jacoco*.xml

      - task: Maven@4
        displayName: 'Maven clean verify (tests + JaCoCo)'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'clean verify'
          options: '-Dmaven.test.failure.ignore=false'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          codeCoverageToolOption: 'JaCoCo'
          javaHomeOption: 'Path'
          jdkDirectory: '$(JAVA_HOME)'
          mavenOptions: '-Xmx1024m'

      - task: SonarQubeAnalyze@5
        displayName: 'Run SonarQube Analysis'
        condition: succeededOrFailed()

      - task: SonarQubePublish@5
        displayName: 'Publish Quality Gate'
        inputs:
          pollingTimeoutSec: '300'
        condition: succeededOrFailed()

# ==============================
# 2) Build container image inside ACR
# ==============================
- stage: ACR_Build
  displayName: 'Build image in ACR (az acr build)'
  dependsOn: Build_Test_Scan
  condition: succeeded()
  jobs:
  - job: ACRBuild
    displayName: 'ACR build: $(imageRepository):$(tag)'
    steps:
      - checkout: self

      # Use PowerShell to avoid WSL/bash on Windows agent
      - task: AzureCLI@2
        displayName: 'az acr build → $(imageRepository):$(tag)'
        inputs:
          azureSubscription: '$(azureSubscription)'
          scriptType: ps
          scriptLocation: inlineScript
          failOnStandardError: true
          inlineScript: |
            Write-Host "Using subscription:"
            az account show
            Write-Host "Starting ACR build for $(imageRepository):$(tag)..."
            az acr build `
              --registry $(acrName) `
              --image $(imageRepository):$(tag) `
              --file Dockerfile `
              .
            Write-Host "✅ ACR build completed."

# ==============================
# 3) Deploy to AKS
#    (Create namespace with admin kubeconfig, then deploy with SC)
# ==============================
- stage: Deploy_AKS
  displayName: 'Deploy to AKS (demo)'
  dependsOn: ACR_Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'K8s deploy & rollout'
    environment: 'aks-dev'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            # Create/ensure namespace with admin kubeconfig (bypasses SC RBAC limits)
            - task: AzureCLI@2
              displayName: 'Ensure namespace (admin kubeconfig)'
              inputs:
                azureSubscription: '$(azureSubscription)'
                scriptType: ps
                scriptLocation: inlineScript
                failOnStandardError: true
                inlineScript: |
                  # Pull admin kubeconfig & create namespace idempotently
                  az aks get-credentials -g rg-hw-aks-dev -n aks-hw-dev --admin --overwrite-existing
                  kubectl create namespace $(k8sNamespace) --dry-run=client -o yaml | kubectl apply -f -

            # Optional: create/update a secret the app uses
            - task: KubernetesManifest@1
              displayName: 'Create/Update app secret'
              inputs:
                action: createSecret
                kubernetesServiceConnection: '$(kubernetesServiceConnection)'
                namespace: '$(k8sNamespace)'
                secretType: generic
                secretName: 'app-secrets'
                secretArguments: |
                  --from-literal=APP_MESSAGE=$(APP_MESSAGE)

            # Deploy manifests with the freshly built image
            - task: KubernetesManifest@1
              displayName: 'Deploy app + service'
              inputs:
                action: deploy
                kubernetesServiceConnection: '$(kubernetesServiceConnection)'
                namespace: '$(k8sNamespace)'
                manifests: |
                  k8s/deployment.yaml
                  k8s/service.yaml
                containers: |
                  $(acrLoginServer)/$(imageRepository):$(tag)

            # Wait for rollout
            - task: Kubernetes@1
              displayName: 'Rollout status (wait until Ready)'
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
                namespace: '$(k8sNamespace)'
                command: 'rollout'
                arguments: 'status deploy/aks-java-api --timeout=300s'

            # Show service external IP (if Service type: LoadBalancer)
            - task: Kubernetes@1
              displayName: 'Show service (external IP)'
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
                namespace: '$(k8sNamespace)'
                command: 'get'
                arguments: 'svc aks-java-api -o wide'
